root[[1]]
zips<-xpathSApply(root,"//li[@class"zipcode"]",xmlValue)
zips<-xpathSApply(root,"//'zipcode'",xmlValue)
zips<-xpathSApply(root,"//"zipcode"",xmlValue)
zips<-xpathSApply(root,"//zipcode",xmlValue)
summary(zips)
zips
str(zips)
zip[zip=="21231"]
zip<zip=="21231"
zip<zips=="21231"
zip<-zips=="21231"
summary(zip)
?DT
?fread
?fread()
?DT()
install.packages("data.table")
library(data.table)
?fread()
acsurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fread(acsurl,sep="auto", header=TRUE)
fread(input=acsurl,sep="auto", header=TRUE)
acsurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fread(input=acsurl,sep="auto", header=TRUE)
mean(DT$pwgtp15,by=DT$SEX)
DT<-fread(input=acsurl,sep="auto", header=TRUE)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
?fread()
DT[,mean(pwgtp15),by=SEX]
DT[,mean(pwgtp15),by=DT$SEX]
DT[,mean(DT$pwgtp15),by=DT$SEX]
DT<-fread(input=acsurl,sep="auto", header=TRUE,na.rm=TRUE)
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]
mean(DT[DT$SEX==1,]$pwgtp15)
class(DT)
row.means(DT$pwgtp15)
col.means(DT$pwgtp15)
colMeans(DT$pwgtp15)
colMeans(DT$pwgtp15,DT$SEX)
colMeans[DT$pwgtp15,DT$SEX]
colMeans(DT$SEX)
colMeans(DT)
colMeans(DT$pwgtp15[DT$SEX==1,])
mean(DT$pwgtp15[DT$SEX==1,])
mean[DT$SEX==1,DT$pwgtp15]
mean(DT[DT$SEX==1,DT$pwgtp15])
DT[,mean(pwgtp15,by=SEX)]
DT[,mean(pwgtp15),by=SEX]
DT[,mean(pwgtp15),by(SEX)]
DT[,mean(pwgtp15),by(SEX)]
mean(DT$SEX)
str(DT$SEX)
summarize(DT$SEX)
View(DT)
acsurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
DT<-fread(input=acsurl,sep="auto", header=TRUE)
view(DT)
View(DT)
summarize(DT$SEX)
DT[,mean(pwgtp15),by=SEX]
download.packages("RMySQL")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("sqldf")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv(file="path2csv",stringAsFactors=FALSE)
?read.csv
mydf<-read.csv(file=path2csv,stringAsFactors=FALSE)
mydf<-read.csv(file=path2csv,header=TRUE, sep=",",stringAsFactors=FALSE)
mydf<-read.csv(path2csv,header=TRUE, sep=",",stringAsFactors=FALSE)
mydf<-read.csv(file=path2csv,stringAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r-arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
selet(cran, -time)
select(cran, -time)
_5:20
-5:20
-(5:20)
select(-(X:size))
select(cran -(X:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size.100500,r_os=="linux-gnu")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10))
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size-1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
packageVersion("MySQL")
packageVersion("RMySQL")
setwd("~/Documents/R/Getting & Cleaning Data/Running")
run<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(run,temp)
download.file(run,temp, method="curl")
list.files(temp)
testdata=read.table("~Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/x_test.txt")
testdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/x_test.txt")
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt")
head(testdata)
testlabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/y_test.txt")
summ(testlabels)
summarize(testlabels)
head(testlabels)
class(testlabels)
tail(testlabels)
str(testlabels)
levels(testlabels)
activities=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/activity_labels.txt"
)
features=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/features.txt")
testsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/subject_test.txt")
head(testsubject)
rename(testsubject,subject=V1)
library(dplyr)
rename(testsubject,subject=V1)
head(testsubject)
?rename
?dplyr
rename(testsubject,v1=subject)
str(testsubject)
rename(testsubject,subject=V1)
str(testsubject)
class(testsubject)
View(testsubject)
select(testsubject,subject=V1)
str(testsubject)
View(testsubject)
library(dplyr)
testsub<-select(testsubject,subject=V1)
head (testsub)
head(testlabels)
testact<-rename(testlabels,activity=V1)
head(testact)
testsub<-select(testsubject,subject=V1)
library(reshape)
package.install("reshape")
install.package("reshape")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?cast
acast?
?dcast
?dcast
t(features)
str(features)
head(features)
labels<-t(features)
str(labels)
View(labels)
class(labels)
labels<-dcast(features)
labels<-data.frame(dcast(features))
labels<-data.frame(t(features))
?delete
?dplyr
head(labels)
str(labels)
View(labels)
labels<-arrange(labels,desc(row.names))
labels<-arrange(labels,-row.names)
names<-select(labels, X1-X561)
View(testdata)
View(labels)
View(features)
View(names)
test1<-rbind(testsub, testact)
test1<-cbind(testsub, testact)
View(names)
View(names)
View(names)
names<-labels[,2]
names
names<-labels[,"V2"]
names<-labels["V2"]
names<-labels["V2"]
class(names)
View(features)
View(testdata)
View(labels)
View(features)
View(labels)
?red.tabl
?red.table
?read.table
names<-select(featuress[V2])
names<-select(features,[V2])
names<-select(features,V2)
View(names)
testdata2=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/X_test.txt", col.names=names[,1])
View(testdata2)
testall<-cbind(test1,testdata)
View(testall)
testall<-cbind(test1,testdata2)
View(testall)
mergedtact=merge(testact,activities,by.x="activities", by.y="V1", all=TRUE)
?merge
View(testact)
mergedtact=merge(activities,testact,by.x="V1", by.y="activities", all=TRUE)
?merge
mergedtact<-merge(activities,testact,by.x="V1", by.y="activities", all=TRUE)
View(activities)
View(testact)
View(testlabels)
t1<- merge(testlabels,activities,all=TRUE)
View(`t1`)
View(activities)
View(testsub)
test3<-cbind(testlabels,testsub)
View(test3)
t2<- merge(test3,activities,all=TRUE)
View(`t2`)
View(names)
View(features)
View(testlabels)
View(testsubject)
?dplyr
View(testdata)
View(testdata2)
View(testdata)
testdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/X_test.txt", col.names=names[,1])
View(testdata)
testdata2<-select(testdata,contains("mean")|contains("std"))
#this is a comment
nada
#nada
testdata2<-select(testdata,contains("mean")|contains("std"))
View(testdata)
testdata2<-select(testdata,contains("mean"),contains("std"))
View(testdata2)
View(testdata2)
View(testsubject)
View(testsub)
View(test1)
testsub<-rename(testsubject,subject=V1)
subact<-cbind(testsub, testlabels)
view(subact)
View(subact)
testall<-cbind(subact,testdata2)
View(testall)
testall2<- merge(testall,activities,all=TRUE)
View(testall2)
testall3<-rename(testall2,activity=V2)
View(testall3)
names(testall3)
#load the variable labels for the test and training data
features=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/features.txt")
#extract the column names
names<-select(features,V2)
#loading test dataset & append the column names
testdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/X_test.txt", col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
testdata2<-select(testdata,contains("mean"),contains("std"))
#add activity metadata
activities=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/activity_labels.txt")
#load the activity labels that go with testing data
testlabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/y_test.txt")
#load id for person performing activity
testsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/subject_test.txt")
#Steps in Cleaning Test Data
#Uses descriptive activity names to name the activities in the data set
testsub<-rename(testsubject,subject=V1)
#combine test subjects and activities
subact<-cbind(testsub, testlabels)
#add the testing data
testall<-cbind(subact,testdata2)
#add activity labels
testall2<- merge(testall,activities,all=TRUE)
#change variable name
testall3<-rename(testall2,activity=V2)
View(testall3)
?arrange
testallF<-arrange(testall3, -V1 activity subject )
testallF<-arrange(testall3, activity subject )
testallF<-arrange(testall3, -V1 activity subject )
names(testall3)
testallF<-arrange(testall3, activity, subject )
View(testallF)
library(dplyr)
testallF<-arrange(testall3, activity, subject )
View(testallF)
View(testall3)
testallF<-select(testall3, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
View(testallF)
#loading training dataset
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt"col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
traindata2<-select(trainingdata,contains("mean"),contains("std"))
#load the activity identifiers for each row
traininglabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/y_train.txt")
#load id for person performing activity
trainingsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/subject_train.txt")
#Steps in Cleaning TRAINING Data
#Uses descriptive activity names to name the activities in the data set
trainsub<-rename(trainingsubject,subject=V1)
#combine train subjects and activities
subact_train<-cbind(trainsub, traininglabels)
#add the trainingdata
trainall<-cbind(subact_train,traindata2)
#add activity labels
trainall2<- merge(trainall,activities,all=TRUE)
#change variable name for "activity" and rearrange dataset
trainall3<-rename(trainall2,activity=V2)
trainallF<-select(trainall3, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt"col.names=names[,1])
View(names)
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt",col.names=names[,1])
traindata2<-select(trainingdata,contains("mean"),contains("std"))
View(traindata2)
View(trainingsubject)
View(trainingsubject)
trainsub<-rename(trainingsubject,subject=V1)
subact_train<-cbind(trainsub, traininglabels)
View(subact_train)
trainall<-cbind(subact_train,traindata2)
View(trainall)
trainall2<- merge(trainall,activities,all=TRUE)
View(trainall2)
trainall3<-rename(trainall2,activity=V2)
trainallF<-select(trainall3, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
View(trainallF)
alldata<-rbind.(trainallF, testallF)
?rbind
alldata<-rbind(trainallF, testallF)
View(alldata)
trainall<-cbind(subact_train,traindata2)
trainall<- merge(trainall,activities,all=TRUE)
trainall<-rename(trainall,activity=V2)
trainall<-select(trainall, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
View(trainall)
library(dplyr)
#Load Test Data Elements
#load the variable labels for the test and training data
features=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/features.txt")
#extract the column names
names<-select(features,V2)
#loading test dataset & append the column names
testdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/X_test.txt", col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
testdata2<-select(testdata,contains("mean"),contains("std"))
#add activity metadata
activities=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/activity_labels.txt")
#load the activity labels that go with testing data
testlabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/y_test.txt")
#load id for person performing activity
testsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/subject_test.txt")
#Steps in Cleaning Test Data
#Uses descriptive activity names to name the activities in the data set
testsubject<-rename(testsubject,subject=V1)
#combine test subjects and activities
subact<-cbind(testsubject, testlabels)
#add the testing data
testall<-cbind(subact,testdata2)
#add activity labels
testall<- merge(testall,activities,all=TRUE)
#change variable name for "activity" and rearrange dataset
testall<-rename(testall,activity=V2)
testall<-select(testall, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
#loading training dataset
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt",col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
traindata2<-select(trainingdata,contains("mean"),contains("std"))
#load the activity identifiers for each row
traininglabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/y_train.txt")
#load id for person performing activity
trainsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/subject_train.txt")
#Cleaning TRAINING Data steps
#Uses descriptive activity names to name the activities in the data set
trainsubject<-rename(trainsubject,subject=V1)
#combine train subjects and activities
subact_train<-cbind(trainsubject, traininglabels)
#add the trainingdata
trainall<-cbind(subact_train,traindata2)
#add activity labels
trainall<- merge(trainall,activities,all=TRUE)
#change variable name for "activity" and rearrange dataset
trainall<-rename(trainall,activity=V2)
trainall<-select(trainall, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
#MERGE BOTH DATASETS
alldata<-rbind(trainall, testall)
head(alldata)
alldata<-arrange(alldata,subject)
View(trainall)
View(alldata)
names(alldata)
group_by(alldata,subject,activity, mean)
alldata %.%
group_by(subject,activity) %.%
summarise_each(funs(mean))
newdata<-alldata %>%
group_by(subject,activity) %>%
summarise_each(funs(mean))
View(newdata)
#add the trainingdata
View(newdata)
#load the variable labels for the test and training data
features=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/features.txt")
#extract the column names
names<-select(features,V2)
#TESTING DATA
#Load Test Data Elements & append the column names
testdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/X_test.txt", col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
testdata2<-select(testdata,contains("mean"),contains("std"))
#add activity metadata
activities=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/activity_labels.txt")
#load the activity labels that go with testing data
testlabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/y_test.txt")
#load id for person performing activity
testsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/test/subject_test.txt")
#Cleaning Test Data
#Add label for test subjects
testsubject<-rename(testsubject,subject=V1)
#combine test subjects and activities
subact<-cbind(testsubject, testlabels)
#add the testing data
testall<-cbind(subact,testdata2)
#add activity labels
testall<- merge(testall,activities,all=TRUE)
#change variable name for "activity" and rearrange dataset
testall<-rename(testall,activity=V2)
testall<-select(testall, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
#TRAINING DATA
#loading training dataset
trainingdata=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/X_train.txt",col.names=names[,1])
#extract ONLY the mean and standard deviation for all measures
traindata2<-select(trainingdata,contains("mean"),contains("std"))
#load the activity identifiers for each row
traininglabels=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/y_train.txt")
#load id for person performing activity
trainsubject=read.table("~/Documents/R/Getting & Cleaning Data/UCI HAR Dataset/train/subject_train.txt")
#Cleaning TRAINING Data steps
#Uses descriptive activity names to name the activities in the data set
trainsubject<-rename(trainsubject,subject=V1)
#combine train subjects and activities
subact_train<-cbind(trainsubject, traininglabels)
#add the trainingdata
trainall<-cbind(subact_train,traindata2)
#add activity labels
trainall<- merge(trainall,activities,all=TRUE)
#change variable name for "activity" and rearrange dataset
trainall<-rename(trainall,activity=V2)
trainall<-select(trainall, activity, subject,tBodyAcc.mean...X:fBodyBodyGyroJerkMag.std.. )
#MERGE BOTH DATASETS
alldata<-rbind(trainall, testall)
alldata<-arrange(alldata,subject)
#CREATE an independent tidy data set with the average of each variable for each activity and each subject.
databyact<-alldata %>%
group_by(subject,activity) %>%
summarise_each(funs(mean))
View(databyact)
write.table(databyact,row.names=FALSE)
setwd("~/Documents/R/Getting & Cleaning Data/Course Project")
write.table(databyact,"~/tidy_data_file.txt",row.names=FALSE)
?write.table
write.table(databyact,file="~/tidy_data_file.txt",row.names=FALSE)
write.table(databyact,file="~/Document/R/tidy_data_file.txt",row.names=FALSE)
write.table(databyact,file="~/Documents/R/tidy_data_file.txt",row.names=FALSE)
write.table(databyact,file="~/Documents/R/tidy_data_file.txt",sep="\t",row.names=FALSE)
write.table(databyact,file="~/Documents/R/tidy_data_file.txt",sep="\t",row.names=FALSE,quote=FALSE)
View(testdata)
View(databyact)
write.csv(alldata,file='~/Documents/R/tidy.csv', sep=",", row.names=F, quote=F)
write.csv(databyact,file='~/Documents/R/tidy2.csv', sep=",", row.names=F, quote=F)
View(names)
